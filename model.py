# -*- coding: utf-8 -*-
"""DT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19WGfjIeaK6ZTB0t2-TK75Qtot6dgbBvs
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing Libraries
import numpy as np  # Scientific Computation
import pandas as pd  # Data Analysis
import seaborn as sns  # Statistical brought
# %matplotlib inline
import matplotlib.pyplot as plt  # ploting
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score


train_data = pd.read_csv('train.csv')

train_data.head()

train_data.shape

train_data.describe()

"""## Analysing DATA"""

sns.countplot(x='Survived', data=train_data)

sns.countplot(x='Survived', hue='Sex', data=train_data)

# Survivors
X = train_data[train_data.Survived == 1].shape[0]
print(X)

# Death number
Y = train_data[train_data.Survived == 0].shape[0]
print(Y)

# Men who survived
Z = train_data[(train_data.Sex == 'male') & (train_data.Survived == 1)].shape[0]
print(Z)

# Women who survived
A = train_data[(train_data.Sex == 'female') & (train_data.Survived == 1)].shape[0]
print(A)

109 + 233

sns.countplot(x='Survived', hue='Pclass', data=train_data)

train_data['Age'].plot.hist()

train_data['Fare'].plot.hist(bins=20, figsize=(10, 5))

sns.countplot(x='SibSp', data=train_data)

"""## Data Wrangling"""

train_data.isnull()

train_data.isnull().sum()

sns.heatmap(train_data.isnull(), yticklabels=False)

sns.heatmap(train_data.isnull(), yticklabels=False, cmap='viridis')

sns.boxplot(x='Pclass', y='Age', data=train_data)

train_data.head(20)

cols = train_data[['Pclass', 'Age']]


def impute_age(cols):
    Age = cols[1]
    Pclass = cols[0]
    if (pd.isnull(Age)):
        if (Pclass == 1):
            return 37
        elif (Pclass == 2):
            return 29
        else:
            return 24
    else:
        return Age


train_data['Age'] = train_data[['Pclass', 'Age']].apply(impute_age, axis=1)
train_data.head()

sns.heatmap(train_data.isnull(), yticklabels=False, cmap='viridis')

train_data.isnull().sum()

train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)
train_data.head()

sex = pd.get_dummies(train_data['Sex'], drop_first=True)
print(sex)

train_data = pd.concat([train_data, sex], axis=1)
train_data.head()

train_data.drop('Sex', axis=1, inplace=True)
train_data.head()

"""##Train_Test_Data"""

X = train_data.values[:, 1:7]
y = train_data.values[:, 0]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)

# Using DecisionTreeClassifier
clf_entropy = DecisionTreeClassifier(criterion="entropy", random_state=100, max_depth=5, min_samples_leaf=5)
clf_entropy.fit(X_train, y_train)

y_pred_en = clf_entropy.predict(X_test)
y_pred_en

### Check Acuracy
score = accuracy_score(y_test, y_pred_en) * 100
score

### Create a pickel file using serialization
import pickle

pickle_out = open("clf.pkl", "wb")
pickle.dump(clf_entropy, pickle_out)
pickle_out.close()
